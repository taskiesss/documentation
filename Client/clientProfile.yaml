openapi: 3.0.3
info:
  title: Client API
  version: 1.0.0

paths:
  /api/clients/{id}:
    get:
      summary: Get client by ID
      description: |
        If id = "my-profile", then:
        - BACKEND: Fetch the client from the JWT token (check freelancer profile).
        - FRONTEND: Make the edit icons visible (check freelancer profile).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the client
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                  name:
                    type: string
                  username:
                    type: string
                  country:
                    type: string
                  rate:
                    type: integer
                  skills:
                    type: array
                    items:
                      type: string
                  languages:
                    type: array
                    items:
                      type: string
                  description:
                    type: string
                  profilePicture:
                    type: string
                  coverPhoto:
                    type: string
                  completedJobs:
                    type: integer
                  totalSpent:
                    type: number
                    format: float

  /api/clients/{id}/workdone:
    get:
      summary: Get work done by client
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: UUID of the client
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number (default is 0)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Page size (default is 10)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        jobName:
                          type: string
                        jobId:
                          type: string
                        rate:
                          type: integer
                        pricePerHour:
                          type: number
                        totalHours:
                          type: number
                  pageable:
                    type: object
                    properties:
                      sort:
                        type: object
                        properties:
                          unsorted:
                            type: boolean
                          sorted:
                            type: boolean
                          empty:
                            type: boolean
                      pageNumber:
                        type: integer
                      pageSize:
                        type: integer
                      offset:
                        type: integer
                      unpaged:
                        type: boolean
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer

  /clients/skills:
    patch:
      summary: Update client skills
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skills:
                  type: array
                  items:
                    type: string
              required:
                - skills
      responses:
        '200':
          description: Skills updated successfully
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '404':
          description: Client not found

  /clients/description:
    patch:
      summary: Update client description
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
              required:
                - description
      responses:
        '200':
          description: Description updated successfully
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '404':
          description: Client not found

  /clients/profile-picture:
    patch:
      summary: Update the client's profile picture
      description: Upload a new profile picture for a client.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProfilePictureUploadRequest"
      responses:
        '200':
          description: Profile picture updated successfully
        '400':
          description: Bad request (e.g., invalid file format or missing file)
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found
        '415':
          description: Unsupported media type (only images allowed)
        '500':
          description: Internal server error

components:
  schemas:
    ProfilePictureUploadRequest:
      type: object
      properties:
        profilePicture:
          type: string
          format: binary
          description: The profile picture file to upload (JPEG, PNG, or WEBP).
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
