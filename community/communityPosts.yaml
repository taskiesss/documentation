openapi: 3.0.0
info:
  title: Freelancers Communities API
  version: "1.0"

paths:
  /freelancers/communities/{communityId}/posts:
    get:
      summary: Get paginated list of posts for a specific community
      description: |
        Retrieves a paginated list of posts belonging to the specified community.
        The page and size parameters are used to control pagination.
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 0
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Paginated response with posts data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPostResponse"
        "401":
          description: Unauthorized - Invalid or missing JWT token

  /freelancers/communities/{communityId}/post/{postId}/post-comments:
    get:
      summary: Get paginated list of comments for a specific post
      description: Retrieves a paginated list of comments belonging to the specified post.
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 0
        - in: query
          name: size
          required: false
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Paginated response with post comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCommentResponse"
        "401":
          description: Unauthorized - Invalid or missing JWT token

  /freelancers/communities/{communityId}/post:
    post:
      summary: Create a new post in a specific community
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
      responses:
        "201":
          description: Post created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or missing JWT token

  /freelancers/communities/{communityId}/post/{postId}/comment:
    post:
      summary: Add a comment to a post in a specific community
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
        - in: path
          name: postId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        "201":
          description: Comment created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized - Invalid or missing JWT token

  /freelancers/communities/{communityId}/post/{postId}/likes:
    get:
      summary: Get list of freelancers who liked a post
      operationId: getPostLikes
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with list of freelancers who liked the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLikesResponse"
        "400":
          description: Invalid postId format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /freelancers/communities/{communityId}/post/{postId}/likes/{liked}:
    post:
      summary: Like or unlike a post
      operationId: likePost
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: liked
          in: path
          required: true
          schema:
            type: boolean
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Action completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid postId or liked parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict (e.g., post already liked)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /freelancers/communities/{communityId}/post/{postId}:
    delete:
      summary: Delete a specific post in a community
      operationId: deleteCommunityPost
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Post deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /freelancers/communities/{communityId}/post/{postId}/comment/{commentId}:
    delete:
      summary: Delete a specific comment on a post
      operationId: deleteCommunityPostComment
      parameters:
        - name: communityId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Comment deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Post:
      type: object
      properties:
        postID:
          type: string
        postOwner:
          $ref: "#/components/schemas/PostOwner"
        postTitle:
          type: string
        postContent:
          type: string
        isLiked:
          type: boolean
        numberOfLikes:
          type: integer
        numberOfComments:
          type: integer
        date:
          type: string
          format: date-time
      required:
        - postID
        - postOwner
        - postTitle
        - postContent
        - isLiked
        - numberOfLikes
        - numberOfComments
        - date

    Comment:
      type: object
      properties:
        commentId:
          type: string
        postOwner:
          $ref: "#/components/schemas/PostOwner"
        content:
          type: string
        date:
          type: string
          format: date-time
      required:
        - commentId
        - postOwner
        - content
        - date

    PostOwner:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        profilePicture:
          type: string
        role:
          type: string
      required:
        - id
        - name
        - profilePicture
        - role

    CreatePostRequest:
      type: object
      properties:
        postTitle:
          type: string
        postContent:
          type: string
      required:
        - postTitle
        - postContent

    PostLikesResponse:
      type: object
      properties:
        likes:
          type: array
          items:
            $ref: "#/components/schemas/PostOwner"
      required:
        - likes

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error

    Sort:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean

    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        sort:
          $ref: "#/components/schemas/Sort"
        offset:
          type: integer
        unpaged:
          type: boolean
        paged:
          type: boolean

    PaginatedPostResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        pageable:
          $ref: "#/components/schemas/Pageable"
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
        first:
          type: boolean
        empty:
          type: boolean

    PaginatedCommentResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        pageable:
          $ref: "#/components/schemas/Pageable"
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
        first:
          type: boolean
        empty:
          type: boolean
