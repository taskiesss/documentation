
openapi: 3.0.0
info:
  title: Taskaya Project - APIs
  description: >
    This document describes all APIs for the Taskaya Project. Currently, it
    includes schemas and endpoints for the Signup, Login, and Search processes.
    Additional APIs (e.g., Forgot Password) will be added in future updates.
  version: 1.0.0

servers:
  - url: https://localhost/
    description: Local development server

paths:
  /search/freelancers:
    post:
      tags:
        - Search
      summary: Search for freelancers by skills, filters, and search term
      description: >
        Search for freelancers based on their skills, additional filters (such
        as experience level, hourly rate, and rating), and a search term that
        matches names or titles. The request also includes top-level pagination
        fields (page, size, sortBy, sortDirection).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFreelancersRequest"
      responses:
        "200":
          description: Freelancers found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFreelancerResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /search/communities:
    post:
      tags:
        - Search
      summary: Search for communities by skills, filters, and search term
      description: >
        Search for communities based on their skills, additional filters (such
        as experience level, hourly rate, and rating), and a search term that
        matches names or titles. The request also includes top-level pagination
        fields (page, size, sortBy, sortDirection).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCommunitiesRequest"
      responses:
        "200":
          description: Communities found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCommunityResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /search/jobs:
    post:
      tags:
        - Search
      summary: Search for jobs by skills, filters, and search term
      description: >
        Retrieves job listings based on `id`, `title`, `description`, 
        `experienceLevel`, `skills`, `hourlyRateMin/Max`, `projectLength`, 
        `postedDate`, `rating`, and `isSaved`. The search term matches job 
        titles or descriptions. Includes top-level pagination fields (page, size,
        sortBy, sortDirection).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchJobsRequest"
      responses:
        "200":
          description: Jobs found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageJobResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    # ------------------------------------------------------
    # SEARCH REQUESTS (Flattened) -- Updated sort fields
    # ------------------------------------------------------
    SearchFreelancersRequest:
      type: object
      properties:
        search:
          type: string
          description: A keyword or partial/full name to search for freelancers.
          example: "John"
        skills:
          type: array
          description: List of skills to filter by
          items:
            type: string
          example:
            - "Python"
            - "JavaScript"
        experienceLevel:
          type: string
          description: Experience level filter
          enum:
            - entry_level
            - intermediate
            - expert
          example: "intermediate"
        hourlyRateMin:
          type: number
          description: Minimum hourly rate
          example: 20
        hourlyRateMax:
          type: number
          description: Maximum hourly rate
          example: 50
        rate:
          type: integer
          description: Filter by rating (1-5)
          example: 4

        page:
          type: integer
          description: Zero-based page index
          example: 0
        size:
          type: integer
          description: Size of each page
          example: 10
        sortBy:
          type: string
          description: Sorting field, e.g. "name" or "rating"
          example: "rating"
        sortDirection:
          type: string
          description: Sorting direction
          enum:
            - ASC
            - DES
          example: "DES"

    SearchCommunitiesRequest:
      type: object
      properties:
        search:
          type: string
          description: A keyword or partial/full name to search for communities.
          example: "Data Science"
        skills:
          type: array
          description: List of skills to filter by
          items:
            type: string
          example:
            - "Data Science"
            - "Machine Learning"
        experienceLevel:
          type: string
          description: Experience level filter
          enum:
            - entry_level
            - intermediate
            - expert
          example: "intermediate"
        hourlyRateMin:
          type: number
          description: Minimum hourly rate
          example: 20
        hourlyRateMax:
          type: number
          description: Maximum hourly rate
          example: 50
        rate:
          type: integer
          description: Filter by rating (1-5)
          example: 4

        page:
          type: integer
          description: Zero-based page index
          example: 0
        size:
          type: integer
          description: Size of each page
          example: 10
        sortBy:
          type: string
          description: Sorting field, e.g. "name" or "rating"
          example: "name"
        sortDirection:
          type: string
          description: Sorting direction
          enum:
            - ASC
            - DES
          example: "ASC"

    SearchJobsRequest:
      type: object
      properties:
        search:
          type: string
          description: A keyword or partial/full title to search for jobs.
          example: "Developer"
        skills:
          type: array
          description: List of skills to filter by
          items:
            type: string
          example:
            - "Full Stack Development"
            - "React"
        experienceLevel:
          type: string
          description: Experience level filter
          enum:
            - entry_level
            - intermediate
            - expert
          example: "intermediate"
        hourlyRateMin:
          type: number
          description: Minimum hourly rate
          example: 20
        hourlyRateMax:
          type: number
          description: Maximum hourly rate
          example: 50
        projectLength:
          type: string
          description: Duration of the project
          enum:
            - _less_than_1_month
            - _1_to_3_months
            - _3_to_6_months
            - _more_than_6_months
          example: "_1_to_3_months"

        page:
          type: integer
          description: Zero-based page index
          example: 0
        size:
          type: integer
          description: Size of each page
          example: 10
        sortBy:
          type: string
          description: Sorting field, e.g. "title" or "postedDate"
          example: "title"
        sortDirection:
          type: string
          enum:
            - ASC
            - DES
          description: Sorting direction
          example: "ASC"

    # ------------------------------------------------------
    # SINGLE-ITEM RESPONSE SCHEMAS
    # ------------------------------------------------------
    FreelancerResponse:
      type: object
      properties:
        id:
          type: string
          example: "887dda4d-c986-44c9-bba8-d1bef62d1c91"
        name:
          type: string
          example: "John Doe"
        title:
          type: string
          example: "Senior Python Developer"
        description:
          type: string
          example: "Experienced developer with expertise in Python and Django."
        skills:
          type: array
          items:
            type: string
          example: ["Python", "Django"]
        rate:
          type: number
          example: 4.8
        hourlySalary:
          type: number
          example: 50

    CommunityResponse:
      type: object
      properties:
        id:
          type: string
          example: "887dda4d-c986-44c9-bba8-d1bef62d1c91"
        name:
          type: string
          example: "Data Science Enthusiasts"
        description:
          type: string
          example: "A community for data science enthusiasts..."
        skills:
          type: array
          items:
            type: string
          example: ["Data Science", "Machine Learning"]
        memberCount:
          type: integer
          example: 500

    JobResponse:
      type: object
      properties:
        id:
          type: string
          example: "887dda4d-c986-44c9-bba8-d1bef62d1c91"
        title:
          type: string
          example: "Full Stack Developer"
        description:
          type: string
          example: "Seeking a skilled React developer..."
        experienceLevel:
          type: string
          enum: ["Entry Level", "Intermediate", "Expert"]
          example: "Intermediate"
        skills:
          type: array
          items:
            type: string
          example: ["React", "HTML", "CSS", "JavaScript"]
        hourlyRateMin:
          type: number
          description: Minimum hourly rate
          example: 20
        hourlyRateMax:
          type: number
          description: Maximum hourly rate
          example: 50
        postedDate:
          type: string
          format: date
          example: "2024-02-02"
        rate:
          type: number
          example: 4
        isSaved:
          type: boolean
          example: false

    # ------------------------------------------------------
    # PAGED RESPONSE WRAPPERS (Spring Page<> style)
    # ------------------------------------------------------
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          example: false
        unsorted:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    Pageable:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/Sort"
        offset:
          type: integer
          example: 0
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 10
        paged:
          type: boolean
          example: true
        unpaged:
          type: boolean
          example: false

    PageFreelancerResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FreelancerResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 3
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    PageCommunityResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CommunityResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    PageJobResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/JobResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 5
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    # ------------------------------------------------------
    # ERROR SCHEMAS
    # ------------------------------------------------------
    ErrorResponseSearch:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: "invalid_input"
            message:
              type: string
              example: "The provided input is invalid. Please check your request."

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: "unknown"
            message:
              type: string
              example: "An unexpected error occurred. Please try again later."
