openapi: 3.0.0
info:
  title: Taskaya Project - APIs
  description: >
    This document describes all APIs for the Taskaya Project. Currently, it
    includes schemas and endpoints for the Signup, Login, and Search processes.
    Additional APIs (e.g., Forgot Password) will be added in future updates.
  version: 1.0.0
servers:
  - url: https://localhost/
    description: Local development server
paths:
  /search/freelancers:
    post:
      tags:
        - Search
      summary: Search for freelancers by skills, filters, and search term
      description: >
        Search for freelancers based on their skills, additional filters (such
        as experience level, hourly rate, and rating), and a search term that
        matches names or titles.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchFreelancersRequest"
      responses:
        "200":
          description: Freelancers found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFreelancerResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /search/communities:
    post:
      tags:
        - Search
      summary: Search for communities by skills, filters, and search term
      description: >
        Search for communities based on their skills, additional filters (such
        as experience level, hourly rate, and rating), and a search term that
        matches names or titles.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCommunitiesRequest"
      responses:
        "200":
          description: Communities found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCommunityResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /search/jobs:
    post:
      tags:
        - Search
      summary: Search for jobs by skills, filters, and search term
      description: >
        Retrieves job listings based on `id`,`title`, `description`, `experience level`, `skills`,`hourly rate range`, 
        `posted date`, `client rating`, and `whether the job is saved`. The search term matches job titles or descriptions. 
        The response is a paginated structure compatible with Spring's Page object.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchJobsRequest"
      responses:
        "200":
          description: Jobs found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageJobResponse"
        "400":
          description: Bad Request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseSearch"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    # ----------------------------------------------
    # REQUEST SCHEMAS
    # ----------------------------------------------
    SearchFreelancersRequest:
      type: object
      properties:
        search:
          type: string
          example: John
          description: A keyword or partial/full name to search for freelancers.
        skills:
          type: array
          items:
            type: string
            example: Python
          nullable: true
          example:
            - Python
            - JavaScript
        filters:
          type: object
          properties:
            experienceLevel:
              type: string
              enum:
                - entry_level
                - intermediate
                - expert
              example: intermediate
            hourlyRate:
              type: object
              properties:
                min:
                  type: number
                  example: 20
                max:
                  type: number
                  example: 50
            rating:
              type: integer
              minimum: 1
              maximum: 5
              example: 4
    SearchCommunitiesRequest:
      type: object
      properties:
        search:
          type: string
          example: Data Science
          description: A keyword or partial/full name to search for communities.
        skills:
          type: array
          items:
            type: string
            example: Data Science
          nullable: true
          example:
            - Data Science
            - Machine Learning
        filters:
          type: object
          properties:
            experienceLevel:
              type: string
              enum:
                - entry_level
                - intermediate
                - expert
              example: intermediate
            hourlyRate:
              type: object
              properties:
                min:
                  type: number
                  example: 20
                max:
                  type: number
                  example: 50
            rating:
              type: integer
              minimum: 1
              maximum: 5
              example: 4
    SearchJobsRequest:
      type: object
      properties:
        search:
          type: string
          example: Developer
          description: A keyword or partial/full title to search for jobs.
        skills:
          type: array
          items:
            type: string
            example: Full Stack Development
          nullable: true
          example:
            - Full Stack Development
            - React
        filters:
          type: object
          properties:
            experienceLevel:
              type: string
              enum:
                - entry_level
                - intermediate
                - expert
              example: intermediate
            hourlyRate:
              type: object
              properties:
                min:
                  type: number
                  example: 20
                max:
                  type: number
                  example: 50
            projectLength:
              type: string
              enum:
                - less_than_1_month
                - 1_to_3_months
                - 3_to_6_months
                - more_than_6_months
              example: 1_to_3_months
            rating:
              type: integer
              minimum: 1
              maximum: 5
              example: 4
    # ----------------------------------------------
    # RESPONSE SCHEMAS
    # ----------------------------------------------
    # Single-item response definitions
    FreelancerResponse:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: John Doe
        title:
          type: string
          example: Senior Python Developer
        description:
          type: string
          example: Experienced developer with expertise in Python and Django.
        skills:
          type: array
          items:
            type: string
            example: Python
        rating:
          type: number
          example: 4.8
        hourlySalary:
          type: number
          example: 50
    CommunityResponse:
      type: object
      properties:
        id:
          type: string
          example: "67890"
        name:
          type: string
          example: Data Science Enthusiasts
        description:
          type: string
          example: >-
            A community for data science enthusiasts to share knowledge and
            collaborate on projects.
        skills:
          type: array
          items:
            type: string
            example: Data Science
        memberCount:
          type: integer
          example: 500
    JobResponse:
      type: object
      properties:
        id:
          type: number
          example: 88
        title:
          type: string
          example: Full Stack Developer
        description:
          type: string
          example: >
            Seeking a skilled Front-End UI Developer with a strong foundation in React and Material UI (MUI)
            to join our growing team. You will be responsible for building, maintaining, and enhancing user interfaces.
        experienceLevel:
          type: string
          enum:
            - Entry Level
            - Intermediate
            - Expert
          example: Intermediate
        skills:
          type: array
          items:
            type: string
          example:
            - React
            - HTML
            - CSS
            - JavaScript
        hourlyRate:
          type: object
          properties:
            min:
              type: number
              example: 20
            max:
              type: number
              example: 30
        postedDate:
          type: string
          format: date
          example: "2024-02-02"
        rating:
          type: number
          example: 4
        isSaved:
          type: boolean
          example: false
    # ----------------------------------------------
    # PAGINATED WRAPPERS (Spring Page<> structure)
    # ----------------------------------------------
    # Sort object for metadata about sorting
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          example: true
        unsorted:
          type: boolean
          example: false
        empty:
          type: boolean
          example: false

    # Pageable object representing the request offsets, etc.
    Pageable:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/Sort"
        offset:
          type: integer
          example: 0
        pageNumber:
          type: integer
          example: 0
        pageSize:
          type: integer
          example: 10
        paged:
          type: boolean
          example: true
        unpaged:
          type: boolean
          example: false

    # PageFreelancerResponse
    PageFreelancerResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/FreelancerResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 3
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    # PageCommunityResponse
    PageCommunityResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CommunityResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    # PageJobResponse
    PageJobResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/JobResponse"
        pageable:
          $ref: "#/components/schemas/Pageable"
        totalElements:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 5
        last:
          type: boolean
          example: false
        size:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          $ref: "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        empty:
          type: boolean
          example: false

    # ----------------------------------------------
    # ERROR SCHEMAS
    # ----------------------------------------------
    ErrorResponseSearch:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: invalid_input
            message:
              type: string
              example: The provided input is invalid. Please check your request.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: unknown
            message:
              type: string
              example: An unexpected error occurred. Please try again later.
