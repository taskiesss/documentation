openapi: "3.0.0"
info:
  title: "Taskaya Project - Login APIs"
  description: "This document describes the APIs related to user authentication."
  version: "1.0.0"

servers:
  - url: "https://localhost/"
    description: "Local development server"

paths:
  /public/login:
    post:
      tags:
        - Login
      summary: "Authenticate a user"
      description: "Authenticate a user with their email and password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "User authenticated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: "Bad Request - Input validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/name-and-picture:
    get:
      security:
        - bearerAuth: []
      tags:
        - Profile
      summary: "Get user name and profile picture"
      description: "Returns the user's name and a link to their profile picture. Requires a valid JWT."
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameAndPictureResponse"
        "401":
          description: "Unauthorized - Invalid or missing token."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentialsError"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "SecurePassword123!"
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        role:
          type: string
          example: "ADMIN or FREELANCER or CLIENT"
        isFirst:
          type: boolean
          default: false
          description: "Indicates if this is the user's first login"
      required:
        - token
        - role
        - isFirst

    BadRequestResponse:
      type: object
      properties:
        status:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "Invalid request data."
        timeStamp:
          type: integer
          format: int64
          example: 1611111111111
        type:
          type: string
          example: "email"
      required:
        - status
        - message
        - timeStamp
        - type

    InvalidCredentialsError:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: "unauthorized"
            message:
              type: string
              example: "The email or password provided is incorrect."
      required:
        - error

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
              example: "unknown"
            message:
              type: string
              example: "An unexpected error occurred. Please try again later."
      required:
        - error

    NameAndPictureResponse:
      type: object
      properties:
        profilePicture:
          type: string
          format: uri
          example: "https://example.com/images/user123.jpg"
        name:
          type: string
          example: "John Doe"
      required:
        - profilePicture
        - name
