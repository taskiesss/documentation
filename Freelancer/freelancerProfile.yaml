openapi: 3.0.0
info:
  title: Freelancer Profile API
  version: 1.0.0

paths:
  /api/freelancers/{id}:
    get:
      summary: Get freelancer profile by ID
      description: Returns the profile details of a freelancer using their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the freelancer
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerProfile'
        '401':
          description: Unauthorized (invalid or missing JWT)
        '404':
          description: Freelancer not found
          
  /api/freelancers/{id}/workdone:
    get:
      summary: Get paginated list of works done by freelancer
      description: Returns a paginated list of works done by the freelancer using their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the freelancer
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page number to retrieve (starts at 0)
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: size
          in: query
          required: true
          description: The number of items per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successfully retrieved the paginated list of works done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableWorksDone'
        '401':
          description: Unauthorized (invalid or missing JWT)
        '404':
          description: Freelancer not found

  /api/freelancers/{id}/portfolios:
    get:
      summary: Get paginated list of portfolios by freelancer ID
      description: Returns a paginated list of portfolios for a freelancer using their ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the freelancer
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page number to retrieve (starts at 0)
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: size
          in: query
          required: true
          description: The number of items per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successfully retrieved the paginated list of portfolios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageablePortfolios'
        '401':
          description: Unauthorized (invalid or missing JWT)
        '404':
          description: Freelancer not found

  /freelancers/portfolio:
    post:
      summary: Upload a new portfolio for the freelancer
      description: Upload and create a new portfolio for the freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the portfolio
                file:
                  type: string
                  format: binary
                  description: The portfolio file (PDF)
      responses:
        '200':
          description: Portfolio uploaded successfully
        '400':
          description: Bad request (e.g., invalid file format or missing file)
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found
        '415':
          description: Unsupported media type (only PDF allowed)
        '500':
          description: Internal server error


    delete:
      summary: Delete a portfolio of the freelancer
      description: Delete the specified portfolio of the freelancer using the portfolio file path.
      security:
        - bearerAuth: []
      parameters:
        - name: filePath
          in: query
          required: true
          description: The path or link to the portfolio to be deleted
          schema:
            type: string
      responses:
        '200':
          description: Portfolio deleted successfully
        '400':
          description: Bad request (e.g., invalid file path)
        '401':
          description: Unauthorized
        '404':
          description: Portfolio not found
        '500':
          description: Internal server error


  /freelancers/profile-picture:
    patch:
      summary: Update the freelancer's profile picture
      description: Upload a new profile picture for a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              $ref: '#/components/schemas/ProfilePictureUploadRequest'
      responses:
        '200':
          description: Profile picture updated successfully
        '400':
          description: Bad request (e.g., invalid file format or missing file)
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found
        '415':
          description: Unsupported media type (only images allowed)
        '500':
          description: Internal server error

  /freelancers/skills:
    patch:
      summary: Update the freelancer's skills
      description: Update the skills of a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillsRequest'
      responses:
        '200':
          description: Skills updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/price-per-hour:
    patch:
      summary: Update the freelancer's hourly rate
      description: Update the freelancer's price per hour.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePricePerHourRequest'
      responses:
        '200':
          description: Price per hour updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/country:
    patch:
      summary: Update the freelancer's country
      description: Update the country of a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCountryRequest'
      responses:
        '200':
          description: Country updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/avrg-hours-per-week:
    patch:
      summary: Update the freelancer's average hours per week
      description: Update the average hours per week for a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvrgHoursPerWeekRequest'
      responses:
        '200':
          description: Average hours per week updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/languages:
    patch:
      summary: Update the freelancer's languages
      description: Update the list of languages for a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguagesRequest'
      responses:
        '200':
          description: Languages updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/educations:
    patch:
      summary: Update the freelancer's educations
      description: Update the list of educations for a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEducationsRequest'
      responses:
        '200':
          description: Educations updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/linkedin:
    patch:
      summary: Update the freelancer's LinkedIn link
      description: Update the LinkedIn link of a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLinkedInRequest'
      responses:
        '200':
          description: LinkedIn link updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/description:
    patch:
      summary: Update the freelancer's description
      description: Update the personal description of a freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDescriptionRequest'
      responses:
        '200':
          description: Description updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

  /freelancers/employement-history:
    patch:
      summary: Update the freelancer's employment history
      description: Update the list of positions held by the freelancer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeHistoryRequest'
      responses:
        '200':
          description: Employment history updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Freelancer not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    FreelancerProfile:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier for the freelancer
        profilePicture:
          type: string
          description: URL or link to the freelancer's profile picture
        name:
          type: string
          description: Freelancer's full name
        username:
          type: string
          description: Freelancer's username
        country:
          type: string
          description: Country of residence
        pricePerHour:
          type: number
          format: float
          description: Hourly rate of the freelancer
        rate:
          type: number
          format: float
          description: Rating of the freelancer (0 to 5)
          minimum: 0
          maximum: 5
        skills:
          type: array
          items:
            type: string
          description: List of skills
        avrgHoursPerWeek:
          type: number
          format: float
          description: Average hours per week the freelancer works
        languages:
          type: array
          items:
            type: string
          description: Languages the freelancer can speak
        educations:
          type: array
          items:
            $ref: '#/components/schemas/Education'
          description: List of educational backgrounds
        linkedIn:
          type: string
          description: Link to the freelancer's LinkedIn account
        description:
          type: string
          description: Freelancer's personal description
        employeeHistory:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeHistory'
          description: List of previous positions held by the freelancer

    Education:
      type: object
      properties:
        degree:
          type: string
          description: Degree obtained
        institution:
          type: string
          description: Name of the institution
        graduationYear:
          type: integer
          description: Year of graduation

    PageablePortfolios:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Portfolio'
          description: List of portfolios in the current page
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                unsorted:
                  type: boolean
                  description: Whether the results are unsorted
                sorted:
                  type: boolean
                  description: Whether the results are sorted
                empty:
                  type: boolean
                  description: Whether the sort field is empty
            pageNumber:
              type: integer
              format: int32
              description: The current page number (0-based index)
            pageSize:
              type: integer
              format: int32
              description: The number of items per page
            offset:
              type: integer
              format: int32
              description: The offset of the current page
            unpaged:
              type: boolean
              description: Whether the page is unpaged
        totalElements:
          type: integer
          format: int32
          description: The total number of portfolios
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available
        size:
          type: integer
          format: int32
          description: The size of the current page (items per page)
        number:
          type: integer
          format: int32
          description: The current page number (starts at 0)

    Portfolio:
      type: object
      properties:
        portfolioPdf:
          type: string
          description: Path or link to the portfolio PDF
        name:
          type: string
          description: Name/title of the portfolio

    PageableWorksDone:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/WorkDone'
          description: List of works done in the current page
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                unsorted:
                  type: boolean
                  description: Whether the results are unsorted
                sorted:
                  type: boolean
                  description: Whether the results are sorted
                empty:
                  type: boolean
                  description: Whether the sort field is empty
            pageNumber:
              type: integer
              format: int32
              description: The current page number (0-based index)
            pageSize:
              type: integer
              format: int32
              description: The number of items per page
            offset:
              type: integer
              format: int32
              description: The offset of the current page
            unpaged:
              type: boolean
              description: Whether the page is unpaged
        totalElements:
          type: integer
          format: int32
          description: The total number of `worksDone` items
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available
        size:
          type: integer
          format: int32
          description: The size of the current page (items per page)
        number:
          type: integer
          format: int32
          description: The current page number (starts at 0)

    WorkDone:
      type: object
      properties:
        jobName:
          type: string
          description: Name of the job completed
        jobId:
          type: string
          description: Name of the job completed  
        rate:
          type: number
          format: float
          description: Rating given by the client after finishing the job
          minimum: 0
          maximum: 5
        pricePerHour:
          type: number
          format: float
          description: Hourly rate charged for this job
        totalHours:
          type: number
          format: float
          description: Total hours worked on this job
      
          
    PortfolioUploadRequest:
      type: object
      properties:
        portfolioFile:
          type: string
          format: binary
          description: The portfolio PDF file to upload (PDF format only).

    EmployeeHistory:
      type: object
      properties:
        position:
          type: string
          description: Position held by the freelancer
        company:
          type: string
          description: Position held by the freelancer
        startYear:
          type: string
          format: date
          description: Start date (year) of the position
        endYear:
          type: string
          format: date
          description: End date (year) of the position

    ProfilePictureUploadRequest:
      type: object
      properties:
        profilePicture:
          type: string
          format: binary
          description: The profile picture file to upload (JPEG, PNG, or WEBP).

    UpdateSkillsRequest:
      type: object
      properties:
        skills:
          type: array
          items:
            type: string
          description: Updated list of skills
      required:
        - skills

    UpdatePricePerHourRequest:
      type: object
      properties:
        pricePerHour:
          type: number
          format: float
          description: New hourly rate
      required:
        - pricePerHour

    UpdateCountryRequest:
      type: object
      properties:
        country:
          type: string
          description: Updated country
      required:
        - country

    UpdateAvrgHoursPerWeekRequest:
      type: object
      properties:
        avrgHoursPerWeek:
          type: number
          format: float
          description: New average hours per week
      required:
        - avrgHoursPerWeek

    UpdateLanguagesRequest:
      type: object
      properties:
        languages:
          type: array
          items:
            type: string
          description: Updated list of languages
      required:
        - languages

    UpdateEducationsRequest:
      type: object
      properties:
        educations:
          type: array
          items:
            $ref: '#/components/schemas/Education'
          description: Updated list of educations
      required:
        - educations

    UpdateLinkedInRequest:
      type: object
      properties:
        linkedIn:
          type: string
          description: Updated LinkedIn URL
      required:
        - linkedIn

    UpdateDescriptionRequest:
      type: object
      properties:
        description:
          type: string
          description: Updated personal description
      required:
        - description

    UpdatePortfolioRequest:
      type: object
      properties:
        portfolioFile:
          type: string
          format: binary
          description: The portfolio PDF file to upload.

    UpdateEmployeeHistoryRequest:
      type: object
      properties:
        employeeHistory:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeHistory'
          description: Updated employment history
      required:
        - employeeHistory
